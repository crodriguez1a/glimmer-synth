(function(t){function e(){const t=window.AudioContext||window.webkitAudioContext
this.context=new t,this.modulators=[],this.noise={node:null,started:!1}}function i(t){for(var e,i="number"==typeof t?t:0,n=new Float32Array(100),s=Math.PI/180,r=0;r<100;++r)e=2*r/100-1,n[r]=(3+i)*e*10*s/(Math.PI+i*Math.abs(e))
return n}function n(t,e,i,n){this.osc=t.createOscillator(),this.gainNode=t.createGain(),this.osc.type=e,this.osc.frequency.value=i,this.gainNode.gain.value=n,this.osc.connect(this.gainNode),this.osc.start(0)}function s(t){var e=t.carrier
t.modulators.length&&t.modulators.forEach(function(t){t.gainNode.connect(e.frequency),e=t.osc})}function r(t,e){for(var i=t.createBufferSource(),n=2*t.sampleRate,s=t.createBuffer(2,n,t.sampleRate),r=0;r<2;r++)for(var o=s.getChannelData(r),a=0;a<n;a++)o[a]=2*Math.random()-1
return i.buffer=s,i.connect(e.gainNode),i.loop=!0,i.start(t.currentTime),i}function o(t,e){var i=e.createOscillator()
return i.type=t.type,i.frequency.setValueAtTime(t.frequency,e.currentTime),i}function a(t){return console.warn(t),0}e.presets={kick:{type:"sine",frequency:100,duration:.05,volume:1,ramp:{to:70},env:{decay:.5}},hat:{type:"square",frequency:0,duration:.05,volume:.05,whiteNoise:!0,env:{decay:.5},filter:{type:"highpass",frequency:60,gain:20}},beeper:{type:"triangle",frequency:440,duration:.2,vol:1,filter:{frequency:1e3,type:"highpass",gain:25},env:{decay:15}},rest:{type:"sine",vol:0,frequency:0}},e.prototype.addModulator=function(t){var e,i=new n(this.context,t.type,t.freq,t.gain)
return this.carrier&&(e=this.modulators.length?this.modulators[this.modulators.length-1].osc:this.carrier,i.gainNode.connect(e.frequency)),this.modulators.push(i),i},e.prototype.gain=function(t){this.gainNode?this.gainNode.gain.value=t:console.warn("No gainNode initialized")},e.prototype.play=function(t){var e,n
this.carrier=o(t,this.context),this.gainNode=this.context.createGain(),this.gainNode.gain.value=t.volume||1,this.dist=this.context.createWaveShaper(),this.carrier.connect(this.gainNode),this.gainNode.connect(this.dist),this.dist.connect(this.context.destination),this.dist.curve=i(3e3),n=this.gainNode,t.whiteNoise&&(this.noise.node=r(this.context,this)),t.ramp&&this.carrier.frequency.linearRampToValueAtTime(t.ramp.to,this.context.currentTime+t.duration),t.filter&&((e=this.context.createBiquadFilter()).type=t.filter.type||a('Filter "type" is required'),e.frequency.value=t.filter.frequency||a('Filter "frequency" is required'),e.gain.value=t.filter.gain||a('Filter "gain" is required'),n.connect(e),n=e),n.connect(this.context.destination),this.start(t),t.duration&&this.gainNode.gain.setTargetAtTime(0,this.context.currentTime,t.duration)},e.prototype.start=function(t){if(t&&t.env&&t.env.attack){var e=this.context.currentTime+t.env.attack/100*t.duration||t.vol,i=t.vol||1
this.gain(0),this.gainNode.gain.setValueAtTime(0,this.context.currentTime),this.gainNode.gain.linearRampToValueAtTime(i,e)}s(this),this.carrier.start(this.context.currentTime)},e.prototype.stop=function(t){var e=0
if(t&&t.env&&t.env.decay){var i=t.env.decay/100*t.duration
e=this.context.currentTime+t.duration+i,this.gainNode.gain.setTargetAtTime(0,e,.1)}else t&&t.duration?this.gainNode.gain.setTargetAtTime(0,this.context.currentTime,t.duration):this.gain(0)
this.modulators.length=0},e.prototype.calculateBpm=function(t){return 6e4/t},e.prototype.sequence=function(t,e,i){for(var n=this.calculateBpm(e),s=0;s<t.length;s++)(function(e){setTimeout(function(){this.play(t[e])}.bind(this),e*n)}).bind(this)(s)},t.Synth=e})(window)
class Note{constructor(){this.C=130.81,this.Cs=138.59,this.D=146.83,this.Ds=155.56,this.E=164.81,this.F=174.61,this.Fs=185,this.G=196,this.Gs=207.65,this.A=220,this.As=233.08,this.B=246.94,this.E5=261.63,this.Ds5=277.18,this.C5=293.66,this.B4=493.883}}class Synthos{constructor(){this.mySynth=new Synth,this.frequencies=[],this.durations=[],this.bpm=200,this.loops=1,this.track=[],this.type="triangle",this.duration=.2}setBpm(t){this.bpm=t}setDurations(t){this.durations=t}setFrequencies(t){this.frequencies=t}setDuration(t){this.duration=t}setType(t){this.type=t}addFrequency(t){this.frequencies[this.frequencies.length]=t}play({filter:t="bandpass"}){for(var e=0;e<this.frequencies.length;e++)this.track[e]={type:this.type,frequency:this.frequencies[e],duration:this.durations[e],filter:{frequency:1e3,type:t,gain:25}}
this.mySynth.sequence(this.track,this.bpm,this.loops)}}